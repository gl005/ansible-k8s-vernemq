---
- name: Cleanup kubernetes folder
  file:
    state: absent
    path: "kubernetes"
- file: path=kubernetes state=directory

- name: Set the cluster to the specified one
  command: "kubectl config use-context {{ cluster_context }}"

- name: Set up passwords for inner and outer user
  file:
    state: touch
    path: "kubernetes/vmq.passwd"

- name: Make inner user
  shell: |
      set timeout 300
      spawn docker run --rm -v {{ ansible_env.PWD }}/kubernetes:/mnt -it erlio/docker-vernemq vmq-passwd /mnt/vmq.passwd inner

      expect "Password: "
      send "{{ inner_user_password }}\n"

      expect "Reenter password: "
      send "{{ inner_user_password }}\n"

      exit 0
  args:
    executable: /usr/bin/expect

- name: Make outer user
  shell: |
      set timeout 300
      spawn docker run --rm -v {{ ansible_env.PWD }}/kubernetes:/mnt -it erlio/docker-vernemq vmq-passwd /mnt/vmq.passwd outer

      expect "Password: "
      send "{{ outer_user_password }}\n"

      expect "Reenter password: "
      send "{{ outer_user_password }}\n"

      exit 0
  args:
    executable: /usr/bin/expect

- name: Delete previous passwd secret on kubernetes
  command: kubectl delete secret vernemq-passwd -n {{ cluster_namespace }}
  ignore_errors: True

- name: Register password file in our namespace
  command: "kubectl create secret generic vernemq-passwd -n {{ cluster_namespace }} --from-file=./kubernetes/vmq.passwd"

- name: prepare templates
  template:
    src: "{{ item }}"
    dest: kubernetes/{{ item | basename | regex_replace('\.j2','') }}
  with_fileglob:
    - ../templates/*.j2

- name: Deploy templates
  command: "kubectl apply -f kubernetes -n {{ cluster_namespace }}"